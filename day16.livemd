<!-- vim: syntax=markdown -->

# Day 16

```elixir
# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/16/04/' > day04.livemd`
#
Mix.install([
  # Join the string so a copy of dayN to dayM doesn't destroy it.
  {:kino, "~> 0.1" <> "4.2"}
])

# Join the string so a copy of dayN to dayM doesn't destroy it.
IEx.Helpers.c("/Users/johnb/dev/2" <> "0" <> "2" <> "4adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
```

## Installation and Data

```elixir
input_example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_example)) ||
    Kino.Input.read(input_puzzleInput)
end
```

## Solution

```elixir
# When inspecting lists of numbers, use "charlists: :as_lists"
defmodule Day16 do
  def parse(text) do
    text
    |> AOC.as_single_lines()
  end

  def solve1(text) do
    parse(text)
  end

  def solve2(text) do
    parse(text)
  end
end

# Example:

data.()
|> Day16.solve1()
|> IO.inspect(label: "\n*** Part 1 solution (example: )")
#

# data.()
# |> Day16.solve2()
# |> IO.inspect(label: "\n*** Part 2 solution (example: )")
#
```
