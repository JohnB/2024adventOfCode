<!-- vim: syntax=markdown -->

# Day 25

```elixir
# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/25/04/' > day04.livemd`
# When inspecting lists of numbers, use "charlists: :as_lists"
#
Mix.install([
  # Join the string so a copy of dayN to dayM doesn't destroy it.
  {:kino, "~> 0.1" <> "4.2"}
])

# Join the string so a copy of dayN to dayM doesn't destroy it.
IEx.Helpers.c("/Users/johnb/dev/2" <> "0" <> "2" <> "4adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
```

## Installation and Data

```elixir
input_example = Kino.Input.textarea("Example Data", monospace: true)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_puzzleInput = Kino.Input.textarea("Puzzle Input", monospace: true)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_example)) ||
    Kino.Input.read(input_puzzleInput)
end
```

## Solution

```elixir
defmodule Day25 do
  def parse(text) do
    [wires, connections] = text
      |> AOC.as_doublespaced_paragraphs()

    wires = wires
      |> AOC.as_single_lines()
      |> Enum.reduce(%{}, fn line, acc ->
        [wire, value] = String.split(line, ": ", trim: true)
        # put_in(acc, [wire], fn _map -> value end)
        acc
      end)

    {:ok, f} = File.open("junk.dot", [:write])
    IO.puts(f, "graph day24 {")
    connections = connections
      |> AOC.as_single_lines()
      |> Enum.reduce(wires, fn line, acc ->
        [operation, output] = String.split(line, " -> ", trim: true)
        [[_, input1, op, input2]] = Regex.scan(~r/(...) (AND|OR|XOR) (...)/, operation)
        # IO.puts(f, "#{input1} --- #{output}[#{op} to #{output}]")
        # IO.puts(f, "#{input2} --- #{output}[#{op} to #{output}]")
        put_in(acc, [output], "\t#{input1} -- #{output} [label=\"#{op}\"]; \n\t#{input2} -- #{output} [label=\"#{op}\"];")
        # acc
      end)

    xyz = connections
      |> Map.keys()
      |> Enum.filter(fn key -> String.slice(key, 0..0) in ["x", "y", "z"] end)
    
    xyz
    |> Enum.sort()
    |> Enum.each(fn key -> IO.puts(f, connections[key]) end)

    (Map.keys(connections) -- xyz)
    |> Enum.sort()
    |> Enum.each(fn key -> IO.puts(f, connections[key]) end)
    # |> Enum.each(fn lines -> IO.puts(lines) end)
    
    IO.puts(f, "}")
    File.close(f)

    [connections, wires]
  end

  def solve1(text) do
    parse(text)
    "cat ~/junk.dot | pbcopy"
  end

  def solve2(text) do
    parse(text)
  end
end

# Example:

IO.inspect(Time.utc_now())
data.()
|> Day25.solve1()
|> IO.inspect(label: "\n*** Part 1 solution (example: )")
IO.inspect(Time.utc_now())
# 

# IO.inspect(Time.utc_now())
# data.()
# |> Day25.solve2()
# |> IO.inspect(label: "\n*** Part 2 solution (example: )")
# IO.inspect(Time.utc_now())
# 

```
