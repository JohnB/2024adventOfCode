<!-- vim: syntax=markdown -->

# Day 06

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2024adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/06/04/' > day04.livemd`
#
# When inspecting lists of numbers, use "charlists: :as_lists"
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data", monospace: true)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input", monospace: true)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Solution

```elixir
defmodule Day06 do
  @guards ["^", ">", "v", "<"]
  @floor "."
  @obstacle "#"
  @right_turn %{"^" => ">", ">" => "v", "v" => "<", "<" => "^"}
  @forever 1..100_000
  
  def find_guard(grid) do
    Enum.find(AOC.grid_cells(grid), fn c -> grid[c] in @guards end)
  end

  def next_pos(grid, pos, dir) do
    # right_column? = AOC.grid_x(grid, pos) == (grid.grid_width - 1)
    # bottom_row? = AOC.grid_y(grid, pos) == (grid.grid_height - 1)
    
    case {dir, AOC.grid_x(grid, pos), AOC.grid_y(grid, pos)} do
      {"^", _, 0} -> :off_board
      {"^", _, _} -> pos - grid.grid_width
      {">", rrr, _} when rrr == (grid.grid_width - 1) -> :off_board
      {">", _, _} -> pos + 1
      {"v", _, ddd} when ddd == (grid.grid_height - 1) -> :off_board
      {"v", _, _} -> pos + grid.grid_width
      {"<", 0, _} -> :off_board
      {"<", _, _} -> pos - 1
    end
  end

  def turn_right(grid, pos, dir) do
    new_dir = @right_turn[dir]
    new_pos = next_pos(grid, pos, new_dir)
    
    {new_pos, new_dir}
  end

  def solve1(text) do
    grid = AOC.as_grid(text)
    position = find_guard(grid)
    original_direction = grid[position]
    grid = Map.put(grid, position, @floor)
    path = MapSet.new([position])
    
    # IO.inspect([position, grid[position]], charlists: :as_lists, label: "guard")

    Enum.reduce_while(@forever, {position, original_direction, path}, fn _, {pos, dir, set} ->
      # IO.inspect([pos, grid[pos], dir, set], charlists: :as_lists, label: "iteration(#{iteration})")
      pos2 = next_pos(grid, pos, dir)
      {new_pos, new_dir} = turn_right(grid, pos, dir)

      case {pos2, grid[pos2], new_dir} 
      # |> IO.inspect(charlists: :as_lists)
      do
        {:off_board, _, _} -> {:halt, Enum.count(set)}
        {_, @floor, _} -> {:cont, {pos2, dir, MapSet.put(set, pos2)}}
        {_, @obstacle, :off_board} -> {:halt, Enum.count(set)}
        {_, @obstacle, _} -> {:cont, {new_pos, new_dir, MapSet.put(set, new_pos)}}
      end
    end)
  end

  def solve2(text) do
    grid = AOC.as_grid(text)
    possible_obstacles = AOC.grid_cells(grid)
      |> Enum.map(fn cell_id -> grid[cell_id] == @floor end)
    position = find_guard(grid)
    original_direction = grid[position]
    grid = Map.put(grid, position, @floor)
    path = MapSet.new([position])
    
    # IO.inspect([position, grid[position]], charlists: :as_lists, label: "guard")

    Enum.reduce_while(@forever, {position, original_direction, path}, fn _, {pos, dir, set} ->
      # IO.inspect([pos, grid[pos], dir, set], charlists: :as_lists, label: "iteration(#{iteration})")
      pos2 = next_pos(grid, pos, dir)
      {new_pos, new_dir} = turn_right(grid, pos, dir)

      case {pos2, grid[pos2], new_dir} 
      # |> IO.inspect(charlists: :as_lists)
      do
        {:off_board, _, _} -> {:halt, Enum.count(set)}
        {_, @floor, _} -> {:cont, {pos2, dir, MapSet.put(set, pos2)}}
        {_, @obstacle, :off_board} -> {:halt, Enum.count(set)}
        {_, @obstacle, _} -> {:cont, {new_pos, new_dir, MapSet.put(set, new_pos)}}
      end
    end)
  end
end

# Example:

p1data.()
|> Day06.solve1()
|> IO.inspect(label: "\n*** Part 1 solution (example: 41)")
# 4711

p1data.()
|> Day06.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: )")
#
```
