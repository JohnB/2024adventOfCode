<!-- vim: syntax=markdown -->

# Day 01

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2024adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Solution

```elixir
defmodule Day01 do
  def parse_parallel_lists(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.reduce([[], []], fn line, [lll, rrr] = _acc ->
      [[_, left, right]] = Regex.scan(~r/(\d+)\W+(\d+)/, line)
      [[lll ++ [String.to_integer(left)]], [rrr ++ [String.to_integer(right)]]]
    end)
    |> Enum.map(&List.flatten/1)
  end

  def solve1(text) do
    [llist, rlist] = parse_parallel_lists(text)

    Enum.zip(Enum.sort(llist), Enum.sort(rlist))
    |> Enum.map(fn {ll, rr} = _pair -> abs(ll - rr) end)
    |> Enum.sum()
  end

  def solve2(text) do
    [llist, rlist] = parse_parallel_lists(text)

    Enum.reduce(llist, 0, fn lnum, acc ->
      rsum = Enum.filter(rlist, fn rr -> rr == lnum end) |> Enum.sum()
      (acc + rsum)
    end)
  end
end

# Example:
# 3   4
# 4   3
# 2   5
# 1   3
# 3   9
# 3   3

p1data.()
|> Day01.solve1()
|> IO.inspect(label: "\n*** Part 1 solution (example: 11)")
# 2264607

p1data.()
|> Day01.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 31)")
# 19457120

```
