<!-- vim: syntax=markdown -->

# Day 09

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2094adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/09/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Solution

```elixir
# When inspecting lists of numbers, use "charlists: :as_lists"
defmodule Day09 do
  def parse(text) do
    text
    |> AOC.as_single_lines()
  end

  def solve1(text) do
    parse(text)
  end

  def solve2(text) do
    parse(text)
  end
end

# Example:

p1data.()
|> Day09.solve1()
|> IO.inspect(label: "\n*** Part 1 solution (example: )")
#

# p1data.()
# |> Day09.solve2()
# |> IO.inspect(label: "\n*** Part 2 solution (example: )")
#
```
