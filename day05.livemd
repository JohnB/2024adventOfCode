<!-- vim: syntax=markdown -->

# Day 05

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2024adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/05/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data", monospace: true)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input", monospace: true)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Solution

```elixir
# When inspecting lists of numbers, use "charlists: :as_lists"
defmodule Day05 do
  def parse(text) do
    [rules, updates] = AOC.as_doublespaced_paragraphs(text)
    rules = rules
      |> AOC.as_single_lines()
      |> Enum.reduce(%{}, fn line, acc ->
        [first, second] = String.split(line, "|")
          |> Enum.map(&String.to_integer/1)

        {_, acc} = get_and_update_in(acc[first], fn current ->
          {current, (current || []) ++ [second]} 
        end)
          
        acc
      end)

    updates = updates
      |> AOC.as_single_lines()
      |> Enum.map(&AOC.as_comma_separated_integers/1)

    [rules, updates]
  end

  # The list is reversed at this point, so the head (last) must come after any in the prev list.
  def is_after?([_only_one_left], _rules), do: true
  def is_after?([last_page | earlier_pages], rules) do
    Enum.all?(earlier_pages, fn earlier_page -> 
      is_nil(rules[last_page]) ||
        !(earlier_page in rules[last_page])
      end) && 
      is_after?(earlier_pages, rules)
  end

  def solve1(text) do
    [rules, updates] = parse(text)

    updates
    |> Enum.filter(fn progression ->
      progression
      |> Enum.reverse()
      |> is_after?(rules)
    end)
    |> Enum.map(fn progression ->
      {center, _others} = List.pop_at(progression, floor(Enum.count(progression) / 2))
      center
    end)
    |> Enum.sum()
  end

  def fix_order(_rules, [left]), do: [left]
  def fix_order(rules, [left, right]) do
    # IO.inspect([left, right], charlists: :as_lists, label: "fix_order2" )
    case {rules[left], rules[right], 
      right in (rules[left] || []), left in (rules[right] || [])} 
      # |> IO.inspect(charlists: :as_lists, label: "case" )
    do
      {nil, nil, _, _} -> [left, right]
      {_, _, true, _} -> [left, right]
      {_, _, _, true} -> [right, left]
      _ -> [left, right]
    end
    # |> IO.inspect(charlists: :as_lists, label: "fix_order2?" )
  end
  def fix_order(rules, [left, right | rest]) do
    # IO.inspect([left, right], charlists: :as_lists, label: "fix_order3" )
    case {rules[left], rules[right], 
      right in (rules[left] || []), left in (rules[right] || [])} 
      # |> IO.inspect(charlists: :as_lists, label: "case" )
    do
      {nil, nil, _, _} -> [left] ++ fix_order(rules, [right] ++ rest)
      {_, _, true, _} -> [left] ++ fix_order(rules, [right] ++ rest)
      {_, _, _, true} -> [right] ++ fix_order(rules, [left] ++ rest)
      _ -> [left] ++ fix_order(rules, [right] ++ rest)
    end
    # |> IO.inspect(charlists: :as_lists, label: "fix_order3?" )
  end

  def solve2(text) do
    [rules, updates] = parse(text)

    updates
    |> Enum.reject(fn progression ->
      progression
      |> Enum.reverse()
      |> is_after?(rules)
    end)
    |> Enum.map(fn progression ->
      # TODO: iterate correctly rather than just over-guessing
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
      progression = fix_order(rules, progression)
    end)
    |> Enum.map(fn progression ->
      {center, _others} = List.pop_at(progression, floor(Enum.count(progression) / 2))
      center
    end)
    |> Enum.sum()
  end
end

# Example:

# p1data.()
# |> Day05.solve1()
# |> IO.inspect(label: "\n*** Part 1 solution (example: 143)")
# 4790

p1data.()
|> Day05.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 123)")
#

```
